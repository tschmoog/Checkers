#BlueJ class context
comment0.params=
comment0.target=Board()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ Board\n\ \n\ During\ creation\ the\ board\ is\ populated\ with\ the\ pieces\ in\ their\ starting\ positions.\ \n\ The\ array\ is\ populated\ with\ positive\ integers\ 1\ &\ 2\ for\ normal\ and\ king\ checkers\ respectivley.\ \n\ Negative\ integers\ are\ used\ for\ the\ second\ player.\ 0\ represents\ a\ free\ square.\ \n\ \n
comment1.params=
comment1.target=Board\ copy()
comment1.text=\n\ Copies\ the\ current\ board\ and\ returns\ it\n\ @return\ Board\ a\ copy\ of\ the\ board\ in\ it's\ current\ state\ \n
comment10.params=turn
comment10.target=boolean\ jumpsAvailable(boolean)
comment10.text=\n\ returns\ if\ the\ given\ player\ has\ available\ jumps\n\ @return\ boolean\ true\ if\ jumps\ are\ abaliable,\ false\ if\ they\ are\ not\ \n
comment11.params=a1\ b1\ a2\ b2
comment11.target=boolean\ jumpOK(int,\ int,\ int,\ int)
comment11.text=\n\ returns\ true\ if\ you\ can\ jump\ from\ a1,\ b1,\ over\ a2,\ b2\n\ @param\ a\n\ @param\ b\n\ @return\n
comment12.params=a\ b
comment12.target=boolean\ open(int,\ int)
comment12.text=\n\ true\ if\ the\ given\ coordinates\ are\ open\n\ @param\ a\n\ @param\ b\n\ @return\n
comment13.params=a\ b
comment13.target=boolean\ inBounds(int,\ int)
comment13.text=\n\ Returns\ true\ if\ the\ desired\ move\ is\ within\ the\ boundaires\ of\ the\ board\n
comment14.params=
comment14.target=int\ boardValue()
comment14.text=\n\ what\ the\ score\ is\ for\ this\ board\n\ @return\ int\ the\ board\ value\n
comment2.params=BP\ A\ B\ nextMove
comment2.target=Board(Board,\ int,\ int,\ int)
comment2.text=\n\ creates\ a\ new\ Board\ from\ the\ current\ state\n\ @param\ Board\ BP\ the\ current\ board\n\ @param\ int\ A\n\ @param\ int\ B\ int\ A\ and\ B\ are\ the\ coordinates\ of\ the\ piece\ to\ be\ moved.\n\ @param\ nextMove,\ an\ integer\ representing\ the\ type\ of\ move\ to\ take\n
comment3.params=turn
comment3.target=boolean\ gameOver(boolean)
comment3.text=\n\ returns\ true\ if\ the\ game\ is\ over,\ due\ to\ there\ being\ no\ more\ avaliable\ moves\ \n\ @return\ boolean\ \n
comment4.params=a\ b
comment4.target=boolean\ canJump(int,\ int)
comment4.text=\n\ similar\ to\ the\ method\ above,\ however\ returns\ a\ boolean\ when\ given\ a\ specific\ piece.\ \n\ @param\ a\ row\ of\ piece\ to\ move\n\ @param\ b\ column\ of\ piece\ to\ move\n\ @return\ boolean\ true\ if\ the\ piece\ can\ make\ the\ move,\ false\ if\ it\ is\ unable.\ \n
comment5.params=a\ b
comment5.target=boolean\ canStep(int,\ int)
comment5.text=\n\ Checks\ whether\ the\ piece\ can\ make\ a\ move\ (same\ as\ above,\ step\ instead\ of\ jump)\n\ @param\ a\ row\ of\ piece\ to\ move\n\ @param\ b\ column\ of\ piece\ to\ move\n\ @return\ boolean\ true\ if\ the\ piece\ can\ make\ the\ move,\ false\ if\ it\ is\ unable.\ \n
comment6.params=turn
comment6.target=java.util.ArrayList\ getMoves(boolean)
comment6.text=\n\ Compiles\ a\ list\ of\ all\ the\ board\ moves\ possible\ and\ adds\ to\ an\ array\ list\n\ @return\ ArrayList\ of\ moves\ that\ can\ be\ made\n
comment7.params=a\ b\ peiceType
comment7.target=java.util.ArrayList\ getJumpMoves(int,\ int,\ int)
comment7.text=\n\ returns\ the\ jump\ moves\ for\ the\ given\ piece\n\ @param\ a\n\ @param\ b\n\ @return\n
comment8.params=a\ b
comment8.target=getStepMoves(int,\ int)
comment8.text=\n\ returns\ a\ list\ of\ coordinates\ the\ given\ peice\ can\ step\ to\n\ NOTE\:\ this\ does\ not\ check\ if\ the\ peice\ has\ a\ legal\ jump\n\ @return\n
comment9.params=a\ b
comment9.target=getJumpMoves(int,\ int)
comment9.text=\n\ returns\ a\ list\ of\ coordinates\ the\ given\ peice\ can\ jump\ to\n\ NOTE\:\ this\ does\ not\ check\ if\ the\ peice\ has\ a\ legal\ jump\n\ @return\n
numComments=15
